# =============================== #
# oops_mark.py
# Mark Balagtas
# 6/10/2021
# Using OOP to create:
# Explosive space ducks shooter
# =============================== #

import random
import pygame
import time
from os import path # path directory

img_dir = path.join(path.dirname(__file__), 'img')

WIDTH = 800
HEIGHT = 600
FPS = 60

BLACK = (0, 0, 0) # colours uwu
WHITE = (255, 255, 255)
RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)

pygame.init() # inits pygame 
pygame.mixer.init()  # for sound
screen = pygame.display.set_mode((WIDTH, HEIGHT)) # open game window
pygame.display.set_caption("My Game")
clock = pygame.time.Clock() # for fps
all_sprites = pygame.sprite.Group() # group holding all sprites

# ========= classes ======== #
            
class Player(pygame.sprite.Sprite): # creates sprite object
    
    def __init__(self):
        pygame.sprite.Sprite.__init__(self) # runs sprite classes initializer
        self.image = pygame.transform.scale(player_img, (60, 48)) # size of ship
        self.image.set_colorkey(BLACK) # keys out colour black
        self.rect = self.image.get_rect() # defines rectangle
        self.rect.centerx = WIDTH / 2
        self.rect.bottom = HEIGHT - 10
        self.speedx = 0

    def update(self):
        self.speedx = 0 
        keystate = pygame.key.get_pressed()
        if keystate[pygame.K_LEFT]: # if arrow keys (left or right) are pressed, move left or right
            self.speedx = -10
        if keystate[pygame.K_RIGHT]:
            self.speedx = 10
        self.rect.x += self.speedx #moving using speedx
        if self.rect.right > WIDTH: # prevents going off screen
            self.rect.right = WIDTH
        if self.rect.left < 0:
            self.rect.left = 0
            
    def shoot(self):
        bullet = Bullet(self.rect.centerx, self.rect.top)
        all_sprites.add(bullet)
        bullets.add(bullet)
        

class Mob(pygame.sprite.Sprite): # adds mob object
    
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.transform.scale(rocket_img, (70, 40))
        self.image.set_colorkey(BLACK)
        #self.image = pygame.Surface((60, 40))
        #self.image.fill(RED)
        self.rect = self.image.get_rect()
        self.rect.x = random.randrange(-2000, -60) # where they spawn
        self.rect.y =  random.randrange(0, HEIGHT/3) 
        self.speedy = 5 # speed of mob

        
    def update(self): # update
        self.rect.x += self.speedy
        if self.rect.right > WIDTH + 60: # if hit ends of screen spawns more
            self.rect.x = random.randrange(-2000,-60)
            self.rect.y = random.randrange(0, HEIGHT/3)
            self.speedy = 5 # speed
            
            
class Bullet(pygame.sprite.Sprite): # adds bullet sprite
    def __init__(self, x, y):
        pygame.sprite.Sprite.__init__(self)
        self.image = pygame.transform.scale(bullet_img, (10, 40)) # scaling bullet img
        self.image.set_colorkey(BLACK)
        self.rect = self.image.get_rect()
        self.rect.bottom = y
        self.rect.centerx = x
        self.speedy = -20 # bullet speed

    def update(self):
        self.rect.y += self.speedy
        # kill if it moves off the top of the screen
        if self.rect.bottom < 0:
            self.kill()
            
            
class Explosion(pygame.sprite.Sprite): # explosionnnnn
    def __init__(self, center):
        pygame.sprite.Sprite.__init__(self)
        self.image = explosion_anim[0] 
        self.rect = self.image.get_rect()
        self.rect.center = center
        self.frame = 0
        self.last_update = pygame.time.get_ticks()
        self.frame_rate = 50

    def update(self):
        now = pygame.time.get_ticks()
        if now - self.last_update > self.frame_rate:
            self.last_update = now
            self.frame += 1
            if self.frame == len(explosion_anim):
                self.kill()
            else:
                center = self.rect.center
                self.image = explosion_anim[self.frame]
                self.rect = self.image.get_rect()
                self.rect.center = center
                
# =================== functions =======================

def newmob():
    m = Mob()
    all_sprites.add(m)
    mobs.add(m)

# text func
font_name = pygame.font.match_font('arial')  # font 
def draw_text(surf, text, size, x, y):
    font = pygame.font.Font(font_name, size)
    text_surface = font.render(text, True, WHITE)
    text_rect = text_surface.get_rect()
    text_rect.midtop = (x, y)
    surf.blit(text_surface, text_rect)
    
def start_screen(): # start screen
    screen.blit(background, background_rect)
    draw_text(screen, "Bruh?", 64, WIDTH / 2, HEIGHT / 4)
    draw_text(screen, "ARROW KEYS to move, SPACE to fire, 'R' to reload.", 22,
              WIDTH / 2, HEIGHT / 2)
    draw_text(screen, "Press a key to begin", 18, WIDTH / 2, HEIGHT * 3 / 4)
    pygame.display.flip()
    pygame.time.delay(2000) # to avoid starting game from spamming from previous games
    waiting = True
    while waiting:
        clock.tick(FPS)
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
            if event.type == pygame.KEYUP:
                waiting = False 

def over_screen(): # game over screen
    screen.blit(background, background_rect)
    draw_text(screen, "Time's Up!", 100, WIDTH / 2, HEIGHT / 4)
    draw_text(screen, str(score), 50, WIDTH / 2, HEIGHT / 1.5)
    pygame.display.flip()
    pygame.time.delay(2000)
                
# =================================================== #
#                       MAIN
# =================================================== #

# Loading all game graphics
background = pygame.image.load(path.join(img_dir, 'bg.jpg')).convert()
background_rect = background.get_rect()
background_scaled = pygame.transform.scale(background, (WIDTH,HEIGHT))
player_img = pygame.image.load(path.join(img_dir, 'ship5.png')).convert()
bullet_img = pygame.image.load(path.join(img_dir, 'laser1.png')).convert()
rocket_img = pygame.image.load(path.join(img_dir, 'rocket.png')).convert()

explosion_anim = [] #list of explosion tiles/sprites
for i in range(9):
    filename = 'tile00{}.png'.format(i)
    img = pygame.image.load(path.join(img_dir, filename)).convert()
    img.set_colorkey(BLACK)
    explosion_anim.append(img) # adds every explosion img into list

# ================= game loop ================ #

running = True
game_over = True
track_score = []

set_time = 30
counter = set_time # set time in seconds
full_ammo = 10
ammo = full_ammo # ammo set to 10 when start
reload_set_time = 2 # delay for reload
reload_time = reload_set_time
pygame.time.set_timer(pygame.USEREVENT, 1000)  # 1 second or 1000 millisecs
reloading = False

while running:

    if game_over:
        # Grouping Sprites
        start_screen()
        game_over = False
        mobs = pygame.sprite.Group()
        bullets = pygame.sprite.Group()
        all_sprites = pygame.sprite.Group()
        player = Player()
        all_sprites.add(player) # adds player sprite
        num_of_mobs = 5    # num of mobs
        for i in range(num_of_mobs): # will add all mobs 
            m = Mob()
            all_sprites.add(m)
            mobs.add(m)
        score = 0
    
    clock.tick(FPS) # keep loop running at the right speed

    for event in pygame.event.get(): # checks for all events using for loop
        if event.type == pygame.QUIT: # check for closing window
            running = False
        elif event.type == pygame.KEYDOWN:
            if not game_over and not reloading and event.key == pygame.K_SPACE and ammo > 0: # if press space and has ammo
                player.shoot() # shoot 
                ammo -= 1 # remove 1 from ammo
            elif event.key == pygame.K_r and not reloading: # if press r and ammo 0
                reloading = True # can't fire unti set to False
            
        if reloading: # once reloading
            if event.type == pygame.USEREVENT: # every second passes, removes 1 from variable
                reload_time -= 1 # the variable
                    
        if event.type == pygame.USEREVENT: # reduces counter by 1 every second passes
            counter -= 1 # for time
            
    if reload_time == 0: # once variable hits 0, variables reset // reload delay //
        ammo = full_ammo # resets ammo
        reloading = False # can shoot again
        reload_time = reload_set_time # reset variable / set delay

    
    # update
    all_sprites.update()
    
    # check to see if a bullet hit a mob
    hits = pygame.sprite.groupcollide(mobs, bullets, True, True)
    for hit in hits: # loops thru so every mob shot, another is spawned
        score += 100
        expl = Explosion(hit.rect.center) # explosion played
        all_sprites.add(expl)
        newmob()
        
        
# draw / render
    screen.fill(BLACK)
    screen.blit(background_scaled, background_rect) # draws bg onto screen
    all_sprites.draw(screen) # draws all sprites
    draw_text(screen, (str(score)), 18, WIDTH / 1.3, 10) # draws current score
    draw_text(screen, ('Score:'), 18, WIDTH / 1.4, 10)
    draw_text(screen, (str(counter)), 18, WIDTH / 2, 10)
    draw_text(screen, ('Ammo:'), 18, WIDTH / 4.5, 10)
    draw_text(screen, (str(ammo)), 18, WIDTH / 3.5, 10)
    

    pygame.display.flip() # draws ^everything^ then shows it
    if counter == 0: # once counter hit 0
        over_screen()
        counter = set_time # reset time
        ammo = full_ammo # resets ammo for new game
        track_score.clear() # clears score
        game_over = True
    
pygame.quit()

# ======================================================= #
# Questions:
# What is the difference between OOP and Procedural coding?
# Procedural uses functions while object oriented uses objects. Functions only contain a series of steps for the computer to do.
# Meanwhile, objects can contain data and or attributes. You can add or modify data of objects, in comparison to functions where you can't.
# Procedural is more like writing a list of instructions top-down, telling what the computer to do step by step.

# How would your program differ if it were made in procedural coding instead?
# It would have been much more difficult to do; way more code. Have seperate functions for every tiny little thing.

# What are the benefits of OOP?
# can have data using objects. Much less code than procedural. Easier to make games for sure.

# What are the drawbacks?
# can be confusing at times. I sometimes lose track what thigs do.
